@page "/plsgame"
@using PlsClient.Models
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@if (!game.Started)
{
	<h1>Nouvelle partie</h1>
	<div>
		<EditForm Model="@game" OnValidSubmit="@HandleValidSubmit">
			<DataAnnotationsValidator />
			<ValidationSummary />
			<p>
				<label>Joueurs:</label>
				<InputNumber id="players" @bind-Value="game.Players" />
			</p>
			<p>
				<label>Villes:</label>
				<InputNumber id="cities" @bind-Value="game.Cities" />
			</p>
			<p>
				<label>Ravitaillements:</label>
				<InputNumber id="refuelings" @bind-Value="game.Refuelings" />
			</p>
			<p>
				<label>Aggravations:</label>
				<InputNumber id="aggravations" @bind-Value="game.Aggravations" />
			</p>
			<p>
				<label>Carte distribuées:</label>
				<InputNumber id="playercards" @bind-Value="game.PlayerCards" />
			</p>
			<p>
				<label>Total: @game.TotalCards</label>
			</p>
			<button type="submit">Démarrer</button>
		</EditForm>
	</div>
}
else
{
	<div class="container">
		<h1>Partie en cours</h1>
		<div class="row">
			<div class="col">
				<div class="alert @AlertClass()" role="alert">
					@game.ChanceToDrawAggravation().ToString("P") Chance de piocher une aggravation lors des @game.NumberOfCardToDraw prochaines cartes (si fin de tas, la deuxième carte n'est pas prise en compte)
				</div>

				<div class="btn-group mr-1" role="group" aria-label="Basic example">
					<button class="btn-primary" @onclick="@(e => DrawCard(PlayerCardType.City))">Ville</button>
					<button class="btn-primary" @onclick="@(e => DrawCard(PlayerCardType.Refueling))">Ravitaillement</button>
					<button class="btn-danger" disabled="@game.IsAggravationDrawned" @onclick="@(e => DrawCard(PlayerCardType.Aggravation))">Aggravation</button>
				</div>

				<button class="btn-secondary" @onclick="@(e => Back())">Retour</button>
			</div>
			<div class="col">
				<div class="card">
					<h5 class="card-title">Cartes restantes</h5>
					<div class="progress">
						<div class="progress-bar" role="progressbar" style="width: @((game.DrawnedCards.Count*100/(game.TotalCards - game.PlayerCards)).ToString())%" aria-valuenow="@game.DrawnedCards.Count()" aria-valuemin="0" aria-valuemax="@(game.TotalCards - game.PlayerCards) "></div>
					</div>
					<p class="card-text">
						@foreach (var stack in game.NumberOfCardPerStack)
						{
							@if (stack > 0)
							{
								<span class="mx-1">@stack</span>
							}
						}
					</p>
				</div>
				<div class="card mt-3">
					<h5 class="card-title">Cartes piochées</h5>
					<p class="card-text">
						Nombre de carte piochées: @GameModel.NumberOfDrawnedCardPerTurn
						@for (int i = 0; i < game.DrawnedCards.Count; i++)
						{
							@if (i % 8 == 0)
							{
								<br />
							}
							@game.DrawnedCards[i].ToString("G")[0]
							@if (i % 2 == 1)
							{
								@:&nbsp;
							}
						}
					</p>
				</div>
			</div>
		</div>
	</div>

	<div class="container mt-5">
		<button @onclick="e => NewGame()">Nouvelle Partie</button>
	</div>
}

@code {

	private GameModel game = new GameModel();

	protected override async Task OnInitializedAsync()
	{
		var currentGame = await localStorage.GetItemAsync<GameModel>("currentGame");
		if (currentGame != null)
		{
			game = currentGame;
		}
	}

	protected override Task OnAfterRenderAsync(bool firstRender)
	{
		localStorage.SetItemAsync("currentGame", game);
		return base.OnAfterRenderAsync(firstRender);
	}


	private void HandleValidSubmit()
	{
		game.Start();
	}

	private void DrawCard(PlayerCardType type)
	{
		game.DrawCard(type);
	}

	private void NewGame()
	{
		game = new GameModel();
	}

	private void Back()
	{
		game.Back();
	}

	private string AlertClass()
	{
		if (game.ChanceToDrawAggravation() >= 0.75)
		{
			return "alert-danger";
		}
		else if (game.ChanceToDrawAggravation() >= 0.50)
		{
			return "alert-warning";
		}
		else if (game.ChanceToDrawAggravation() >= 0.25)
		{
			return "alert-info";
		}
		return "alert-success";
	}
}